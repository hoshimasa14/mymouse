#!/usr/bin/env python3

import amd01.py
import rospy
from geometry_msgs.msg import Twist
from math import pi
from std_msgs.msg import Int32MultiArray

class AMD01_ROS(amd01.AMD01):
	def callback(self, data):
        self.rpm_left = (self.max_vel * data.linear.x * 60 / (0.4 * pi)) / 2 - self.max_rot * data.angular.z * 2
        self.rpm_right = (self.max_vel * data.linear.x * 60 / (0.4 * pi)) / 2 + self.max_rot * data.angular.z * 2
        self.drive(int(self.rpm_right ), int(self.rpm_left * -1))

	def remote_test(self):
		rospy.init_node('motors')
		rospy.Subscriber



	def encoder_test(self):
		s = self.status.reg
		pub = rospy.Publisher("encoder", Int32MultiArray, queue_size=100)

		rospy.init_node('motors')
		rospy.Subscriber("cmd_vel", Twist, m.callback)

		pub_enc = Int32MultiArray()
		pub_enc.data = [0, 0, 0, 0]

		time.sleep(0.05)

		while not rospy.is_shutdown():
			m.get_state()
			pub_enc.data = [s.m1_ref_speed, s.m2_ref_speed, s.m1_encoder, s.m2_encoder]
			pub.publish(pub_enc)
			time.sleep(0.05)

if __name__ == '__main__':
	m = AMD01_ROS()
	m.test()
#	m.remote_test()
